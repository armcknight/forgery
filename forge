#!/usr/bin/env python3

from github import Github
import argh
import os
import requests
import subprocess

def _clone_repo(ssh_url, clone_path):
    'Clone a repo to a path, or skip if it already exists there.'
    if not os.path.exists(clone_path):
        subprocess.check_call(['git', 'clone', ssh_url, clone_path])
    else:
        print('repo already cloned')

def _clone_wiki(repo, clone_path):
    'Clone the wiki associated with a repo, or skip if it already exists locally.'
    if repo.has_wiki:
        wiki_url = f'git@github.com:{repo.full_name}.wiki.git'
        p = subprocess.Popen(['git', 'ls-remote', '-h', wiki_url], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        p.communicate()
        if p.returncode == 0:
            wiki_path = f'{clone_path}.wiki'
            if not os.path.exists(wiki_path):
                subprocess.check_call(['git', 'clone', wiki_url, wiki_path])
            else:
                print('wiki already cloned')

def _clone_nonforked_repo(repo, repo_type_path, no_wikis):
    'Clone a normal repo and any associated wiki.'
    print(f'cloning {repo.full_name}')
    clone_path = f'{repo_type_path}/{repo.owner.login}/{repo.name}'
    _clone_repo(repo.ssh_url, clone_path)

    if not no_wikis:
        _clone_wiki(repo, clone_path)

def clone(access_token, base_path, no_public_repos=False, no_private_repos=False, no_starred_repos=False, no_forked_repos=False, no_public_gists=False, no_private_gists=False, no_starred_gists=False, no_wikis=False):
    'Clone the public, private, starred and forked repos and gists, as well as any associated wikis, unless disabled with options, from the specified account managed by the provided access token.'
    g = Github(access_token)
    u = g.get_user()
    repos_path = f'{base_path}/{u.login}/repos'
    fork_path = f'{repos_path}/forked'
    star_path = f'{repos_path}/starred'
    public_path = f'{repos_path}/public'
    private_path = f'{repos_path}/private'
    subprocess.check_call(['mkdir', '-p', fork_path, star_path, public_path, private_path])
    for repo in u.get_repos():
        if repo.fork:
            if no_forked_repos:
                continue
            r = g.get_repo(repo.full_name)
            print(f'forked: {repo.full_name}')
            clone_path = f'{fork_path}/{r.parent.owner.login}/{repo.name}'
            if not os.path.exists(clone_path):
                subprocess.check_call(['git', 'clone', repo.ssh_url, clone_path])
                subprocess.check_call(['git', 'remote', 'rename', 'origin', 'fork'], cwd=clone_path)
                subprocess.check_call(['git', 'remote', 'add', 'upstream', r.parent.ssh_url], cwd=clone_path)
            else:
                print('already cloned')

            if not no_wikis:
                _clone_wiki(r.parent, clone_path)
        elif repo.private:
            if no_private_repos:
                continue
            _clone_nonforked_repo(repo, private_path, no_wikis)
        else:
            if no_public_repos:
                continue
            _clone_nonforked_repo(repo, public_path, no_wikis)

    if not no_starred_repos:
        for repo in u.get_starred():
            _clone_nonforked_repo(repo, star_path, no_wikis)

    gists_path = f'{base_path}/{u.login}/gists'
    public_gists_path = f'{gists_path}/public'
    private_gists_path = f'{gists_path}/private'
    starred_gists_path = f'{gists_path}/starred'
    subprocess.check_call(['mkdir', '-p', starred_gists_path, public_gists_path, private_gists_path])
    for gist in u.get_gists():
        gist_url = gist.git_pull_url.replace('https://gist.github.com/', '')
        gist_ssh_url = f'git@gist.github.com:{gist_url}'
        if gist.public:
            _clone_repo(gist_ssh_url, f'{public_gists_path}/{gist.description}')
        else:
            _clone_repo(gist_ssh_url, f'{private_gists_path}/{gist.description}')

    if not no_starred_gists:
        for gist in u.get_starred_gists():
            gist_url = gist.git_pull_url.replace('https://gist.github.com/', '')
            gist_ssh_url = f'git@gist.github.com:{gist_url}'
            _clone_repo(gist_ssh_url, f'{starred_gists_path}/{gist.description}')

parser = argh.ArghParser()
parser.add_commands([clone])

if __name__ == '__main__':
    parser.dispatch()
